"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Installation","href":"/akita/docs/installation","docId":"installation"},{"type":"link","label":"The Store","href":"/akita/docs/store","docId":"store"},{"type":"link","label":"The Query","href":"/akita/docs/query","docId":"query"},{"type":"link","label":"Store Config","href":"/akita/docs/config","docId":"config"},{"type":"category","label":"Entities Management","items":[{"type":"link","label":"Entity Store","href":"/akita/docs/entities/entity-store","docId":"entities/entity-store"},{"type":"link","label":"Query Entity","href":"/akita/docs/entities/query-entity","docId":"entities/query-entity"},{"type":"link","label":"Active Entity","href":"/akita/docs/entities/active","docId":"entities/active"},{"type":"link","label":"Sorting","href":"/akita/docs/entities/sorting","docId":"entities/sorting"}],"collapsed":true,"collapsible":true},{"type":"link","label":"UI State","href":"/akita/docs/ui","docId":"ui"},{"type":"link","label":"Transactions","href":"/akita/docs/transactions","docId":"transactions"},{"type":"link","label":"Best Practices","href":"/akita/docs/best-practices","docId":"best-practices"},{"type":"link","label":"Using Immer","href":"/akita/docs/immer","docId":"immer"},{"type":"category","label":"Additional Functionality","items":[{"type":"link","label":"Caching Support","href":"/akita/docs/additional/cache","docId":"additional/cache"},{"type":"link","label":"Store Middleware","href":"/akita/docs/additional/middleware","docId":"additional/middleware"},{"type":"link","label":"Reset Stores","href":"/akita/docs/additional/reset","docId":"additional/reset"},{"type":"link","label":"Event-based APIs","href":"/akita/docs/additional/events","docId":"additional/events"},{"type":"link","label":"Custom Operators","href":"/akita/docs/additional/operators","docId":"additional/operators"},{"type":"link","label":"Array Utils","href":"/akita/docs/additional/array","docId":"additional/array"},{"type":"link","label":"Success/Error Handling","href":"/akita/docs/additional/notifications","docId":"additional/notifications"},{"type":"link","label":"Plain JS Usage","href":"/akita/docs/additional/js","docId":"additional/js"},{"type":"link","label":"Class Support","href":"/akita/docs/additional/class","docId":"additional/class"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Plugins","items":[{"type":"link","label":"State History","href":"/akita/docs/plugins/state-history","docId":"plugins/state-history"},{"type":"link","label":"Dirty Check","href":"/akita/docs/plugins/dirty-check","docId":"plugins/dirty-check"},{"type":"link","label":"Server Side Pagination","href":"/akita/docs/plugins/pagination","docId":"plugins/pagination"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Enhancers","items":[{"type":"link","label":"Devtools","href":"/akita/docs/enhancers/devtools","docId":"enhancers/devtools"},{"type":"link","label":"Persist State","href":"/akita/docs/enhancers/persist-state","docId":"enhancers/persist-state"},{"type":"link","label":"Snapshot Manager","href":"/akita/docs/enhancers/snapshot","docId":"enhancers/snapshot"},{"type":"link","label":"Akita CLI","href":"/akita/docs/enhancers/cli","docId":"enhancers/cli"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Angular","items":[{"type":"link","label":"Architecture","href":"/akita/docs/angular/architecture","docId":"angular/architecture"},{"type":"link","label":"Local Component State","href":"/akita/docs/angular/local-state","docId":"angular/local-state"},{"type":"link","label":"Ng Entity Service","href":"/akita/docs/angular/entity-service","docId":"angular/entity-service"},{"type":"link","label":"Effects","href":"/akita/docs/angular/effects","docId":"angular/effects"},{"type":"link","label":"NgEntityService - OData Pattern","href":"https://github.com/rosostolato/akita-ng-odata-service"},{"type":"link","label":"Akita Firebase","href":"https://github.com/dappsnation/akita-ng-fire"},{"type":"link","label":"Angular Router Store","href":"/akita/docs/angular/router","docId":"angular/router"},{"type":"link","label":"Filters Manager","href":"https://manudss.github.io/akita-filters-plugin/"},{"type":"link","label":"Unit Tests","href":"/akita/docs/angular/tests","docId":"angular/tests"},{"type":"link","label":"HMR","href":"/akita/docs/angular/hmr","docId":"angular/hmr"}],"collapsed":true,"collapsible":true},{"type":"category","label":"React","items":[{"type":"link","label":"RxJS and React","href":"https://engineering.datorama.com/oop-and-rxjs-managing-state-in-react-with-akita-de981e09307"},{"type":"link","label":"Akita with Hooks","href":"https://medium.com/@thomasburlesonIA/https-medium-com-thomasburlesonia-react-hooks-rxjs-facades-4e116330bbe1"},{"type":"link","label":"RxJS Facads in React","href":"https://medium.com/@thomasburlesonIA/react-facade-best-practices-1c8186d8495a"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Svelte","items":[{"type":"link","label":"Akita with Svelte","href":"https://netbasal.com/supercharge-your-svelte-state-management-with-akita-f1f9de5ef43d"}],"collapsed":true,"collapsible":true}]},"docs":{"additional/array":{"id":"additional/array","title":"Array Utils","description":"Let\u2019s say we have the following EntityStore:","sidebar":"docs"},"additional/cache":{"id":"additional/cache","title":"Caching Support","description":"Akita has built-in cache support that will provide information about whether you already have data in the store. For example, in many cases we want to perform an HTTP request only once, and from that point on, to get the cached data from the store.","sidebar":"docs"},"additional/class":{"id":"additional/class","title":"Class Support","description":"Akita also supports using a class as the underlying value instead of a plain object. In most cases, we don\'t recommend doing so for the following reasons:","sidebar":"docs"},"additional/events":{"id":"additional/events","title":"Event-based APIs","description":"One of the recurring requests we got, was to simplify and improve the experience of working with event-based APIs such as web-sockets.","sidebar":"docs"},"additional/js":{"id":"additional/js","title":"Plain JS Usage","description":"Akita can work with any framework and can be used with plain JS. Here\'s an example that uses Svelte and Akita functional creation methods:","sidebar":"docs"},"additional/middleware":{"id":"additional/middleware","title":"Store Middleware","description":"It\u2019s possible to define middleware functions both for a Store and EntityStore. For example, in EntityStore we can add the following methods:","sidebar":"docs"},"additional/notifications":{"id":"additional/notifications","title":"Success/Error Handling","description":"When we perform an HTTP request, we want to notify the user whether it succeeded or not. There are several methodologies you can use to do that:","sidebar":"docs"},"additional/operators":{"id":"additional/operators","title":"Custom Operators","description":"filterNilValue","sidebar":"docs"},"additional/optimstic-updates":{"id":"additional/optimstic-updates","title":"Optimistic Updates","description":"When performing optimistic updates, the UI adds a new entity to the store before the server request responded with the actual data."},"additional/reset":{"id":"additional/reset","title":"Reset Stores","description":"Akita\'s provides resetStores() method that reset all the stores back to their initial state. It can be useful when you want to clean the store\'s data upon user logout.","sidebar":"docs"},"angular/architecture":{"id":"angular/architecture","title":"Architecture","description":"Let\'s say we are building from scratch an e-commerce application. We start by creating a new project with Angular CLI:","sidebar":"docs"},"angular/effects":{"id":"angular/effects","title":"Effects","description":"This library is deprecated. Use ngneat/effects instead.","sidebar":"docs"},"angular/entity-service":{"id":"angular/entity-service","title":"Ng Entity Service","description":"There\u2019s even more boilerplate we can save you, by creating an Akita entity service, which follows the standard RESTful naming conventions by default.","sidebar":"docs"},"angular/hmr":{"id":"angular/hmr","title":"HMR","description":"When using the hmr feature, Angular destroys and creates the store on each change. We can work around this by using persistStorage:","sidebar":"docs"},"angular/local-state":{"id":"angular/local-state","title":"Local Component State","description":"We can manage a local component state using Akita and Angular. When we provide a store in the component\'s providers, it enables us to get a new store instance for each component we create.","sidebar":"docs"},"angular/router":{"id":"angular/router","title":"Angular Router Store","description":"Bindings to connect Angular router to Akita store.","sidebar":"docs"},"angular/tests":{"id":"angular/tests","title":"Unit Tests","description":"Testing Components View","sidebar":"docs"},"best-practices":{"id":"best-practices","title":"Best Practices","description":"The Query","sidebar":"docs"},"config":{"id":"config","title":"Store Config","description":"Production Mode","sidebar":"docs"},"enhancers/cli":{"id":"enhancers/cli","title":"Akita CLI","description":"Akita offers a CLI tool, enabling you to generate stores based on the specifications quickly.","sidebar":"docs"},"enhancers/devtools":{"id":"enhancers/devtools","title":"Devtools","description":"Akita provides integration with the Redux dev-tools chrome extension.","sidebar":"docs"},"enhancers/persist-state":{"id":"enhancers/persist-state","title":"Persist State","description":"The persistState() function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the StorageEngine API, and restore it after a refresh.","sidebar":"docs"},"enhancers/snapshot":{"id":"enhancers/snapshot","title":"Snapshot Manager","description":"There are times when saving the local state in the server becomes useful. For example, you may want to give the user a PDF representing their local state.","sidebar":"docs"},"entities/active":{"id":"entities/active","title":"Active Entity","description":"The store supports having an active property, holding the active entity\'s id. This can prove to be very useful in cases where you want to interact with the entity that is currently active.","sidebar":"docs"},"entities/entity-store":{"id":"entities/entity-store","title":"Entity Store","description":"For the most part, the stores you\'ll require in your applications will be entity stores. You can think of an entity store as a table in a database, where each table represents a flat collection of entities.","sidebar":"docs"},"entities/query-entity":{"id":"entities/query-entity","title":"Query Entity","description":"The Entity Query is similar to the general Query, with additional functionality tailored for EntityStores.","sidebar":"docs"},"entities/sorting":{"id":"entities/sorting","title":"Sorting","description":"By default, the store returns entities in the order in which they arrived from the server. The entities you add are pushed to the end of the collection.","sidebar":"docs"},"immer":{"id":"immer","title":"Using Immer","description":"As you know, when working with immutable objects you often get to what\u2019s called a \u201cspread hell\u201d situations. If you prefer working with immutable objects in an mutable fashion, you can use immer with Akita.","sidebar":"docs"},"installation":{"id":"installation","title":"Installation","description":"Install from the NPM repository using yarn or npm:","sidebar":"docs"},"plugins/dirty-check":{"id":"plugins/dirty-check","title":"Dirty Check","description":"The DirtyCheckPlugin is useful for cases when you want an indication whether the state is dirty (data in the store has been modified). For example, you may want to display a save button only if the user changes something.","sidebar":"docs"},"plugins/pagination":{"id":"plugins/pagination","title":"Server Side Pagination","description":"In many cases - for example, when working with very large data-sets - we don\'t want to work with the full collection in memory. Instead server-side paging is used, where the server sends just a single page at a time.","sidebar":"docs"},"plugins/state-history":{"id":"plugins/state-history","title":"State History","description":"The StateHistoryPlugin provides a convenient way for undo and redo functionality, saving you the trouble of maintaining a history in the app yourself.","sidebar":"docs"},"query":{"id":"query","title":"The Query","description":"A Query is a class offering functionality responsible for querying the store. You can think of the query as being similar to database queries. Its constructor function receives as parameters its own store and possibly other query classes.","sidebar":"docs"},"store":{"id":"store","title":"The Store","description":"The Store is a single object which contains the store state and serves as the single source of truth.","sidebar":"docs"},"transactions":{"id":"transactions","title":"Transactions","description":"Transactions are an optimization for performing multiple operations on the store. Let\'s say we have the following store and query:","sidebar":"docs"},"ui":{"id":"ui","title":"UI State","description":"Akita recommends separating the Domain State from the UI State. Domain State is the state of your application in the server side, while the UI state is more along the lines of the current time based on the user\u2019s machine, which tab is active tab, or whether a drop-down is open.","sidebar":"docs"}}}')}}]);