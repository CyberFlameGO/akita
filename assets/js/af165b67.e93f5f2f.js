"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[8458],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2682:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],l={title:"Store Middleware"},s=void 0,d={unversionedId:"additional/middleware",id:"additional/middleware",title:"Store Middleware",description:"It\u2019s possible to define middleware functions both for a Store and EntityStore. For example, in EntityStore we can add the following methods:",source:"@site/docs/additional/middleware.mdx",sourceDirName:"additional",slug:"/additional/middleware",permalink:"/akita/docs/additional/middleware",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/middleware.mdx",tags:[],version:"current",frontMatter:{title:"Store Middleware"},sidebar:"docs",previous:{title:"Caching Support",permalink:"/akita/docs/additional/cache"},next:{title:"Reset Stores",permalink:"/akita/docs/additional/reset"}},p={},u=[{value:"Using this",id:"using-this",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It\u2019s possible to define middleware functions both for a ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore"),". For example, in ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore")," we can add the following methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="books.store.ts"',title:'"books.store.ts"'},"@StoreConfig({ name: 'books' })\nexport class BooksStore extends EntityStore<BooksState> {\n  constructor() {\n    super();\n  }\n\n  akitaPreAddEntity(book: Book) {\n    if (book.price === 100) {\n      return {\n        ...book,\n        price: limitedPrice,\n      };\n    }\n\n    return book;\n  }\n\n  akitaPreUpdateEntity(prevBook: Book, nextBook: Book) {\n    // return the same entity or modify it\n  }\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"preAddEntity()")," middleware is called when we invoke the ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore.set()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore.add()")," methods with the newly added entity, and gives you the possibility to modify it before inserting it into the store."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"preUpdateEntity()")," middleware is called with the previous entity\u2019s data, as well as the updated version of it, whenever we call any ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore")," method that updates an entity, for instance, ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore.update(1)")," , ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityStore.updateActive()"),"."),(0,a.kt)("p",null,"In addition to that, we\u2019ve added the ",(0,a.kt)("inlineCode",{parentName:"p"},"preUpdate()")," middleware that\u2019s supported in both stores, and is called with the previous and the current state."),(0,a.kt)("p",null,"This middleware is called whenever we call ",(0,a.kt)("inlineCode",{parentName:"p"},"Store.update()"),". For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.store.ts"',title:'"auth.store.ts"'},"@StoreConfig({ name: 'auth' })\nexport class AuthStore extends Store<AuthState> {\n  constructor() {\n    super();\n  }\n\n  akitaPreUpdate(prevState: AuthState, nextState: AuthState) {\n    // return the same state or modify it\n  }\n}\n")),(0,a.kt)("p",null,"These can also be useful for debugging purposes. For example, logging who's updating the store."),(0,a.kt)("h2",{id:"using-this"},"Using this"),(0,a.kt)("p",null,"You can just use ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," without worrying about it :)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.store.ts"',title:'"auth.store.ts"'},"@StoreConfig({ name: 'auth' })\nexport class AuthStore extends Store<AuthState> {\n  constructor(private someService: SomeService) {\n    super();\n  }\n\n  akitaPreUpdate(prevState: AuthState, nextState: AuthState) {\n    this.someService.getData();\n    // return the same state or modify it\n  }\n}\n")))}m.isMDXComponent=!0}}]);