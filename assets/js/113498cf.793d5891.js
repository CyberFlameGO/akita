"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[1712],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return g}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return n?o.createElement(g,a(a({ref:t},d),{},{components:n})):o.createElement(g,a({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},642:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var o=n(3117),r=n(102),s=(n(7294),n(3905)),a=["components"],i={title:"Unit Tests"},l=void 0,c={unversionedId:"angular/tests",id:"angular/tests",title:"Unit Tests",description:"Testing Components View",source:"@site/docs/angular/tests.mdx",sourceDirName:"angular",slug:"/angular/tests",permalink:"/akita/docs/angular/tests",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/angular/tests.mdx",tags:[],version:"current",frontMatter:{title:"Unit Tests"},sidebar:"docs",previous:{title:"Angular Router Store",permalink:"/akita/docs/angular/router"},next:{title:"HMR",permalink:"/akita/docs/angular/hmr"}},d={},u=[{value:"Testing Components View",id:"testing-components-view",level:2},{value:"Mocking the Query",id:"mocking-the-query",level:3},{value:"Using the Store",id:"using-the-store",level:3},{value:"Testing the Store/Query",id:"testing-the-storequery",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"testing-components-view"},"Testing Components View"),(0,s.kt)("p",null,"Let's create a simple ",(0,s.kt)("inlineCode",{parentName:"p"},"todos")," application so we can have something to work it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.store.ts"',title:'"todos.store.ts"'},"export interface TodosState extends EntityState<Todo, number> {\n  ui: {\n    filter: string;\n  };\n}\n\n@StoreConfig({ name: 'todos' })\nexport class TodosStore extends EntityStore<TodosState> {\n  constructor() {\n    super({ ui: { filter: 'active' } });\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.query.ts"',title:'"todos.query.ts"'},"export class TodosQuery extends QueryEntity<TodosState> {\n  selectFilter$ = this.select(state => state.ui.filter);\n\n  constructor(protected store: TodosStore) {\n    super(store);\n  }\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos-page.components.ts"',title:'"todos-page.components.ts"'},'@Component({\n  selector: \'todos-page\',\n  template: `\n     <div *ngFor="let todo of todos$ | async" class="todo">\n       {{ todo.title }}\n     </div>\n\n     <div class="no-todos" *ngIf="!(todos$ | async).length">\n       No result\n     </div>\n\n     <div class="filter">{{ selectFilter$ | async }}</div> \n  `\n})\nexport class TodosPageComponent implements OnInit {\n  todos$: Observable<Todo[]>;\n  selectFilter$: Observable<string>;\n\n  constructor(\n    private todosQuery: TodosQuery,\n    private todosService: TodosService\n  ) {}\n\n  ngOnInit() {\n    this.todos$ = this.todosQuery.selectAll();\n    this.selectFilter$ = this.todosQuery.selectFilter$;\n    this.todosService.get().subscribe();\n  }\n}\n')),(0,s.kt)("p",null,"There are two strategies that we can use to test the component:"),(0,s.kt)("h3",{id:"mocking-the-query"},"Mocking the Query"),(0,s.kt)("p",null,"We can mock the query and in each spec provide the selector result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos-page.component.spec.ts"',title:'"todos-page.component.spec.ts"'},"\ndescribe('TodosPageComponent', () => {\n  let component: TodosPageComponent;\n  let todosQuery: TodosQuery;\n  let fixture: ComponentFixture<TodosPageComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        TodosService,\n        TodosQuery\n      ],\n      declarations: [TodosComponent]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TodosComponent);\n    component = fixture.componentInstance;\n    todosQuery = TestBed.get(TodosQuery);\n  });\n\n  it('should display no todos message', () => {\n    todosQuery.selectAll.and.returnValue(of([]));\n    fixture.detectChanges();\n    const noMessageElement = fixture.debugElement.query(By.css('.no-todos'));\n    expect(noMessageElement).not.toBeNull();\n  });\n\n  it('should display two todos', () => {\n    todosQuery.selectAll.and.returnValue(of([createTodo(), createTodo()]));\n    fixture.detectChanges();\n    const todos = fixture.debugElement.queryAll(By.css('li'));\n    expect(todos.length).toEqual(2);\n  });\n\n  it('should display the initial filter', () => {\n    todosQuery.selectFilter$ = of('active');\n    fixture.detectChanges();\n    const filter = fixture.debugElement.query(By.css('.filter'));\n    expect(filter.nativeElement.innerText).toEqual('active');\n  });\n\n  it('should display the updated filter', () => {\n    todosQuery.selectFilter$ = of('completed');\n    fixture.detectChanges();\n    const filter = fixture.debugElement.query(By.css('.filter'));\n    expect(filter.nativeElement.innerText).toEqual('completed');\n  });\n});\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"To simplify your Angular specs, we recommend using ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/ngneat/spectator"},"Spectator"),".")),(0,s.kt)("h3",{id:"using-the-store"},"Using the Store"),(0,s.kt)("p",null,"We can inject the ",(0,s.kt)("inlineCode",{parentName:"p"},"store"),", update the data, and make our assertions:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos-page.component.spec.ts"',title:'"todos-page.component.spec.ts"'},"describe('TodosPageComponent', () => {\n  let component: TodosPageComponent;\n  let todosStore: TodosStore;\n  let fixture: ComponentFixture<TodosPageComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      providers: [\n       TodosService,\n      ],\n      declarations: [TodosComponent]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(TodosComponent);\n    component = fixture.componentInstance;\n    todosStore = TestBed.inject(TodosStore);\n  });\n\n  it('should display no todos message', () => {\n    fixture.detectChanges();\n    const noMessageElement = fixture.debugElement.query(By.css('.no-todos'));\n    expect(noMessageElement).not.toBeNull();\n  });\n\n  it('should display two todos', () => {\n    todosStore.set([createTodo(), createTodo()]);\n    fixture.detectChanges();\n    const todos = fixture.debugElement.queryAll(By.css('li'));\n    expect(todos.length).toEqual(2);\n  });\n\n  it('should display the initial filter', () => {\n    fixture.detectChanges();\n    const filter = fixture.debugElement.query(By.css('.filter'));\n    expect(filter.nativeElement.innerText).toEqual('active');\n  });\n\n  it('should display the updated filter', () => {\n    todosStore.update({ ui: { filter: 'completed ' } });\n    fixture.detectChanges();\n    const filter = fixture.debugElement.query(By.css('.filter'));\n    expect(filter.nativeElement.innerText).toEqual('completed');\n  });\n});\n")),(0,s.kt)("h2",{id:"testing-the-storequery"},"Testing the Store/Query"),(0,s.kt)("p",null,"There is no reason to test the built-in Akita's methods because they have been well tested. The only tests you should add are for custom methods that you might have. "),(0,s.kt)("p",null,"For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.store.ts"',title:'"todos.store.ts"'},"export interface TodosState extends EntityState<Todo, number> {}\n\n@StoreConfig({ name: 'todos' })\nexport class TodosStore extends EntityStore<TodosState> {\n  customUpdateMethod(condition) {\n    if (condition) {\n      this.set([]);\n    }\n  }\n}\n")),(0,s.kt)("p",null,"We can test the ",(0,s.kt)("inlineCode",{parentName:"p"},"Store")," or the ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," without using Angular:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.store.spec.ts"',title:'"todos.store.spec.ts"'},"describe('TodosStore', () => {\n  let store: TodosStore;\n\n  beforeEach(() => {\n    store = new TodosStore();\n  });\n\n  it('should test custom method', () => {\n    spyOn(store, 'set');\n    store.customUpdateMethod(false);\n    expect(store.set).not.toHaveBeenCalled();\n    store.customUpdateMethod(true);\n    expect(store.set).toHaveBeenCalled();\n  });\n});\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The same principles also apply to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Query"))))}m.isMDXComponent=!0}}]);