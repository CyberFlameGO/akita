"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[7115],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6491:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={title:"Best Practices"},c=void 0,l={unversionedId:"best-practices",id:"best-practices",title:"Best Practices",description:"The Query",source:"@site/docs/best-practices.mdx",sourceDirName:".",slug:"/best-practices",permalink:"/akita/docs/best-practices",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/best-practices.mdx",tags:[],version:"current",frontMatter:{title:"Best Practices"},sidebar:"docs",previous:{title:"Transactions",permalink:"/akita/docs/transactions"},next:{title:"Using Immer",permalink:"/akita/docs/immer"}},p={},u=[{value:"The Query",id:"the-query",level:3},{value:"Data Storage Types",id:"data-storage-types",level:3},{value:"UI State",id:"ui-state",level:3},{value:"Keep It Simple",id:"keep-it-simple",level:3},{value:"Subscription Management",id:"subscription-management",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"the-query"},"The Query"),(0,o.kt)("p",null,"Avoid creating selectors in your components:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="nav.component.ts"',title:'"nav.component.ts"'},"@Component({})\nclass NavComponent {\n  isLoggedIn$ = this.authQuery.select(state => !!state.token);\n  \n  constructor(private authQuery: AuthQuery) {\n  }\n}\n")),(0,o.kt)("p",null,"Instead, create them in the query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.query.ts"',title:'"auth.query.ts"'},"export class AuthQuery extends Query<AuthState> {\n  isLoggedIn$ = this.select(state => !!state.token);\n  \n  constructor(protected store: AuthStore) {\n    super(store);\n  }\n}\n")),(0,o.kt)("p",null,"This makes your components cleaner and the selectors reusable across the application."),(0,o.kt)("h3",{id:"data-storage-types"},"Data Storage Types"),(0,o.kt)("p",null,"Store only plain objects in the store, avoid storing ",(0,o.kt)("inlineCode",{parentName:"p"},"Map")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Set"),". It's more efficient to perform immutable operations (which are required for updating the store) with plain objects rather than with complex ones such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Map")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Set"),".\nMoreover, it's harder to serialize this types of objects."),(0,o.kt)("h3",{id:"ui-state"},"UI State"),(0,o.kt)("p",null,"Keep the UI data separated from the model data. Read more about this topic ",(0,o.kt)("a",{parentName:"p",href:"ui"},"here"),"."),(0,o.kt)("h3",{id:"keep-it-simple"},"Keep It Simple"),(0,o.kt)("p",null,"Avoid over-engineering. Don't create a separate store for any entity you may have. For example, you might have a list of articles where each article contains a list of comments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="articles.store.ts"',title:'"articles.store.ts"'},"interface Article {\n  id: ID;\n  comments: Comment[];\n  title: string;\n}\n\ninterface ArticlesState extends EntityState<Article> {\n}\n\n@StoreConfig({ name: 'articles' })\nclass ArticlesStore extends EntityStore<ArticlesState> {\n  constructor() {\n    super();\n  }\n}\n")),(0,o.kt)("p",null,"In most cases, there is no need to create a separate entity store for the ",(0,o.kt)("inlineCode",{parentName:"p"},"comments"),". Instead use Akita's ",(0,o.kt)("a",{parentName:"p",href:"/akita/docs/additional/array"},"Array Utils"),". This will keep your store easier to maintain and use. If you still require a separate store, check out this article for tips on how to combine their data:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://netbasal.com/working-with-normalized-data-in-akita-e626d4c67ca4"},"Working with Normalized Data in Akita and Angular")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://dev.to/arielgueta/introducing-one-to-many-relationship-in-angular-akita-37me"},"Introducing One To Many Relationship in Angular & Akita"))),(0,o.kt)("h3",{id:"subscription-management"},"Subscription Management"),(0,o.kt)("p",null,"A question that often comes up is whether to subscribe at the component or the service. Let's examine the two options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"class TodoService {\n  get() {\n    return this.http.get<Todo[]>('/api/todos').pipe(\n      tap(entities => {\n        this.todoStore.set(entities);\n      })\n    );\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.components.ts"',title:'"todos.components.ts"'},"class TodosComponent {\n  ngOnInit() {\n   this.todoService.get().subscribe();\n  }\n}\n")),(0,o.kt)("p",null,"Prefer this option when you need to show the user a success or error message locally in the component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.components.ts"',title:'"todos.components.ts"'},"class TodosComponent {\n  ngOnInit() {\n   this.todoService.get().subscribe({\n     next: () => {\n       this.success = true;\n     }\n     error: (err) => {\n      this.error = err;\n     }\n   });\n  }\n}\n")),(0,o.kt)("p",null,"Otherwise, you can subscribe at the service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"class TodoService {\n  get() {\n    return this.http.get<Todo[]>('/api/todos').subscribe(entities => {\n      this.todoStore.set(entities);\n    });\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.components.ts"',title:'"todos.components.ts"'},"class TodosComponent {\n  ngOnInit() {\n    this.todoService.get();\n  }\n}\n")))}d.isMDXComponent=!0}}]);