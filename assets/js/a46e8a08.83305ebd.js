"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[1908],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),u=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=u(t.components);return r.createElement(c.Provider,{value:e},t.children)},d="mdxType",l={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||l[f]||i;return n?r.createElement(m,a(a({ref:e},p),{},{components:n})):r.createElement(m,a({ref:e},p))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[d]="string"==typeof t?t:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5310:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],s={title:"Event-based APIs"},c=void 0,u={unversionedId:"additional/events",id:"additional/events",title:"Event-based APIs",description:"One of the recurring requests we got, was to simplify and improve the experience of working with event-based APIs such as web-sockets.",source:"@site/docs/additional/events.mdx",sourceDirName:"additional",slug:"/additional/events",permalink:"/akita/docs/additional/events",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/events.mdx",tags:[],version:"current",frontMatter:{title:"Event-based APIs"},sidebar:"docs",previous:{title:"Reset Stores",permalink:"/akita/docs/additional/reset"},next:{title:"Custom Operators",permalink:"/akita/docs/additional/operators"}},p={},d=[],l={toc:d};function f(t){var e=t.components,n=(0,o.Z)(t,a);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"One of the recurring requests we got, was to simplify and improve the experience of working with event-based APIs such as web-sockets."),(0,i.kt)("p",null,"To make it easier for you, we\u2019ve added a new API method\u200a\u2014\u200a",(0,i.kt)("inlineCode",{parentName:"p"},"runStoreAction")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"runEntityStoreAction"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { runStoreAction, StoreAction, runEntityStoreAction, EntityStoreAction  } from '@datorama/akita';\n\nrunStoreAction(BooksStore, StoreAction.Update, update => update({ filter: 'COMPLETE' }));\n\n// Or use a string\nrunStoreAction('books', StoreAction.Update, update => update({ filter: 'COMPLETE' }));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.SetEntities, set => set([\n  { id: 1 },\n  { id: 2 }\n]));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.AddEntities, add => add({ id: 1 }));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.UpdateEntities, update => update(2, { title: 'New title' }));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.RemoveEntities, remove => remove(2));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.UpsertEntities, upsert => upsert([2, 3],\n  { title: 'New Title' }, (id, newState) => ({ id, ...newState, price: 0 })));\n\nrunEntityStoreAction(BooksStore, EntityStoreAction.UpsertManyEntities, upsertMany => upsertMany([\n  { id: 2, title: 'New title', price: 0 },\n  { id: 4, title: 'Another title', price: 0 },\n));\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"runStoreAction()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"runEntityStoreAction()")," takes the store\u2019s class or name, the store action to perform and an operation\ncallback. The first argument of the operation callback is the store operator specified by the action. You can determine\nthese parameters from your socket connection and update any store you want."),(0,i.kt)("p",null,"By using the store name and not the store class as the first argument, type checking of the respective action arguments is disabled.\nThis can be useful when validation of untyped data is unnecessary and can be passed directly to the activity."))}f.isMDXComponent=!0}}]);