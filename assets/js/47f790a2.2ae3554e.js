"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[644],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(p,".").concat(m)]||u[m]||h[m]||o;return n?r.createElement(d,s(s({ref:t},l),{},{components:n})):r.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7897:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={title:"Snapshot Manager"},p=void 0,c={unversionedId:"enhancers/snapshot",id:"enhancers/snapshot",title:"Snapshot Manager",description:"There are times when saving the local state in the server becomes useful. For example, you may want to give the user a PDF representing their local state.",source:"@site/docs/enhancers/snapshot.mdx",sourceDirName:"enhancers",slug:"/enhancers/snapshot",permalink:"/akita/docs/enhancers/snapshot",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/enhancers/snapshot.mdx",tags:[],version:"current",frontMatter:{title:"Snapshot Manager"},sidebar:"docs",previous:{title:"Persist State",permalink:"/akita/docs/enhancers/persist-state"},next:{title:"Akita CLI",permalink:"/akita/docs/enhancers/cli"}},l={},u=[],h={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are times when saving the local state in the server becomes useful. For example, you may want to give the user a PDF representing their local state.\nFor such cases, Akita provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"snapshotManager")," API."),(0,o.kt)("p",null,"To get a snapshot of the whole application state, you can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"getStoresSnapshot()")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  saveState() {\n    this.http.post('/url', snapshotManager.getStoresSnapshot());\n  }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"getStoresSnapshot()")," returns an object containing the whole application state. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "todos": {\n     "entities": { ... }\n   },\n   "cart": {\n     "entities": { ... }\n   },\n   "session": {\n     "firstName": "",\n     ...\n   }\n}\n')),(0,o.kt)("p",null,"If you don't need the whole application state, you can pass the specific stores that you need:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  saveState() {\n    const stores = ['todos', 'widgets'];\n    this.http.post('/url', snapshotManager.getStoresSnapshot(stores));\n  }\n}\n")),(0,o.kt)("p",null,"It also works the other way around, when you get the snapshot from the server you can save it by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"setStoresSnapshot() "),"method and passing the snapshot:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  setSnapshotFromServer(snapshotFromServer) {\n    snapshotManager.setStoresSnapshot(snapshotFromServer);\n\n    // Support lazy stores\n    snapshotManager.setStoresSnapshot(snapshotFromServer, { lazy: true } );\n  }\n}\n")))}m.isMDXComponent=!0}}]);