"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[3893],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=i(n),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[p]="string"==typeof e?e:o,c[1]=u;for(var i=2;i<a;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8487:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return i},toc:function(){return p}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),c=["components"],u={title:"Local Component State"},s=void 0,i={unversionedId:"angular/local-state",id:"angular/local-state",title:"Local Component State",description:"We can manage a local component state using Akita and Angular. When we provide a store in the component's providers, it enables us to get a new store instance for each component we create.",source:"@site/docs/angular/local-state.mdx",sourceDirName:"angular",slug:"/angular/local-state",permalink:"/akita/docs/angular/local-state",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/angular/local-state.mdx",tags:[],version:"current",frontMatter:{title:"Local Component State"},sidebar:"docs",previous:{title:"Architecture",permalink:"/akita/docs/angular/architecture"},next:{title:"Ng Entity Service",permalink:"/akita/docs/angular/entity-service"}},l={},p=[{value:"Counter State Provider",id:"counter-state-provider",level:2},{value:"Dynamic Stores",id:"dynamic-stores",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We can manage a local component state using Akita and Angular. When we provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"store")," in the component's ",(0,a.kt)("a",{parentName:"p",href:"https://netbasal.com/angular-services-do-not-have-to-be-singletons-ffa879e62082"},"providers"),", it enables us to get a new store instance for each component we create."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="counter.state.ts"',"{7}":!0,title:'"counter.state.ts"'},"import { guid, Store, StoreConfig } from '@datorama/akita';\n\ntype State = { counter: number };\n\n@Injectable()\nclass CounterStore extends Store<State> {\n  constructor() { \n    super({ counter: 0 }, { name: `Counter-${guid()}` }) \n  }\n}\n\n@Injectable()\nclass CounterQuery extends Query<State> {\n  constructor(protected store: CounterStore) { super(store); }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="counter.component.ts"',"{7}":!0,title:'"counter.component.ts"'},"@Component({\n  selector: 'counter',\n  template: `\n    {{ counter$ | async }}\n    <button (click)=\"increment()\">Increment</button>\n  `,\n  providers: [CounterStore, CounterQuery]\n})\nexport class CounterComponent {\n  counter$ = this.query.select('counter');\n  @Output() update = this.counter$.pipe(skip(1));\n\n  constructor(\n    private store: CounterStore,\n    private query: CounterQuery\n  ) { }\n\n  increment() {\n    this.store.update(({ counter }) => ({ counter: counter + 1 }));\n  }\n}\n")),(0,a.kt)("h2",{id:"counter-state-provider"},"Counter State Provider"),(0,a.kt)("p",null,"You can also take a different approach and create a counter state provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="counter.state"',title:'"counter.state"'},"type State = { counter: number };\n\nclass CounterState {\n  store: Store<State>;\n  query: Query<State>;\n}\n\nfunction counterStateFactory(element: ElementRef<Element>) {\n  const name = element.nativeElement.getAttribute('name');\n  const store = new Store<State>({ counter: 0 }, { name });\n  const query = new Query<State>(store);\n\n  return {\n    store,\n    query\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{7} title="counter.component.ts"',"{7}":!0,title:'"counter.component.ts"'},"@Component({\n  selector: 'counter',\n  template: `\n    {{ counter$ | async }}\n    <button (click)=\"increment()\">Increment</button>\n  `,\n  providers: [{\n    provide: CounterState, \n    useFactory: counterStateFactory,\n    deps: [ElementRef]\n  }]\n})\nexport class CounterComponent {\n  counter$ = this.state.query.select('counter');\n  @Output() update = this.counter$.pipe(skip(1));\n\n  constructor(\n    private state: CounterState\n  ) { }\n\n  increment() {\n    this.state.store.update(({ counter }) => ({ counter: counter + 1 }));\n  }\n}\n")),(0,a.kt)("p",null,"Open the Redux devtools, and you'll see the magic. You can play with the code ",(0,a.kt)("a",{parentName:"p",href:"https://ng-run.com/edit/tgmNS28x8z5UpWcyh7GN?open=app%2Fcounter%2Fcounter.component.ts"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="app.component.html"',title:'"app.component.html"'},'<counter (update)="onUpdate($event)" name="one"></counter>\n<counter (update)="onUpdate($event)" name="two"></counter>\n<counter (update)="onUpdate($event)" name="three"></counter>\n')),(0,a.kt)("h2",{id:"dynamic-stores"},"Dynamic Stores"),(0,a.kt)("p",null,"You can also manage a collection of stores in a service. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"counters.service.ts","counters.service.ts":!0},"@Injectable({ providedIn: 'root })\nexport class CountersService {\n  private stores = new Map();\n\n  createState(name: string) {\n    const store = new Store({ counter: 0 }, { name });\n    const query = new Query(store);\n\n    const state = { store, query };\n    this.stores.set(name, state);\n\n    return state\n  } \n\n  getState(name: string) {\n    return this.stores.get(name);\n  } \n}\n")))}d.isMDXComponent=!0}}]);