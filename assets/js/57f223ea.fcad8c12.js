"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[7548],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1511:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return p}});var r=n(3117),o=n(102),s=(n(7294),n(3905)),a=["components"],i={title:"The Query"},l=void 0,c={unversionedId:"query",id:"query",title:"The Query",description:"A Query is a class offering functionality responsible for querying the store. You can think of the query as being similar to database queries. Its constructor function receives as parameters its own store and possibly other query classes.",source:"@site/docs/query.mdx",sourceDirName:".",slug:"/query",permalink:"/akita/docs/query",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/query.mdx",tags:[],version:"current",frontMatter:{title:"The Query"},sidebar:"docs",previous:{title:"The Store",permalink:"/akita/docs/store"},next:{title:"Store Config",permalink:"/akita/docs/config"}},u={},p=[{value:"API",id:"api",level:2},{value:"<code>select()</code>",id:"select",level:3},{value:"<code>getValue()</code>",id:"getvalue",level:3},{value:"<code>selectLoading()</code>",id:"selectloading",level:3},{value:"<code>selectError()</code>",id:"selecterror",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," is a class offering functionality responsible for querying the store. You can think of the query as being similar to database queries. Its ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor")," function receives as parameters its own ",(0,s.kt)("inlineCode",{parentName:"p"},"store")," and possibly other query classes. "),(0,s.kt)("p",null,"Queries can talk to other queries, join entities from different stores, etc. To create a ",(0,s.kt)("inlineCode",{parentName:"p"},"Query"),", you need to extend the ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," class from Akita:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="session.query.ts"',title:'"session.query.ts"'},"import { Query } from '@datorama/akita';\nimport { SessionState, SessionStore } from './session.store';\n\nexport class SessionQuery extends Query<SessionState> {  \n  constructor(protected store: SessionStore) {\n    super(store);\n  }\n}\n")),(0,s.kt)("p",null,"With this setup you get a ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," with the following methods:"),(0,s.kt)("h2",{id:"api"},"API"),(0,s.kt)("h3",{id:"select"},(0,s.kt)("inlineCode",{parentName:"h3"},"select()")),(0,s.kt)("p",null,"Select a slice from the store:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="session.query.ts"',title:'"session.query.ts"'},"\nimport { Query } from '@datorama/akita';\nimport { SessionState } from './session.store';\n\nexport class SessionQuery extends Query<SessionState> {\n  allState$ = this.select();\n  isLoggedIn$ = this.select(state => !!state.token);\n  selectName$ = this.select('name');\n\n  // Returns { name, age }\n  multiProps$ = this.select(['name', 'age']);\n\n  // Returns [name, age]\n  multiPropsCallback$ = this.select(\n    [state => state.name, state => state.age]\n  )\n  \n  constructor(protected store: SessionStore) {\n    super(store);\n  }\n}\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"select()")," method returns an ",(0,s.kt)("inlineCode",{parentName:"p"},"observable")," that calls ",(0,s.kt)("inlineCode",{parentName:"p"},"distinctUntilChanged()")," internally, meaning it will ",(0,s.kt)("strong",{parentName:"p"},"only")," fire when the state changes, i.e., when there is a new reference."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The Query ",(0,s.kt)("inlineCode",{parentName:"p"},"select")," methods always returns an ",(0,s.kt)("inlineCode",{parentName:"p"},"observable")," which pushes the initial value first.")),(0,s.kt)("h3",{id:"getvalue"},(0,s.kt)("inlineCode",{parentName:"h3"},"getValue()")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"getValue()")," method returns the ",(0,s.kt)("em",{parentName:"p"},"raw")," value of the store."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="session.query.ts"',title:'"session.query.ts"'},"\nimport { Query } from '@datorama/akita';\nimport { SessionState } from './session.store';\n\nexport class SessionQuery extends Query<SessionState> {\n\n  constructor(protected store: SessionStore) {\n    super(store);\n  }\n\n  get isLoggedIn() {\n    return !!this.getValue().token;\n  }\n}\n")),(0,s.kt)("h3",{id:"selectloading"},(0,s.kt)("inlineCode",{parentName:"h3"},"selectLoading()")),(0,s.kt)("p",null,"Subscribes to the store's ",(0,s.kt)("inlineCode",{parentName:"p"},"loading")," state:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="login.components.ts"',title:'"login.components.ts"'},"\n@Component({})\nexport class LoginComponent {\n  isLoading$ = this.sessionQuery.selectLoading();\n\n  constructor(private sessionQuery: SessionQuery) {}\n}\n")),(0,s.kt)("h3",{id:"selecterror"},(0,s.kt)("inlineCode",{parentName:"h3"},"selectError()")),(0,s.kt)("p",null,"Subscribes to the store's ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," state:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="login.components.ts"',title:'"login.components.ts"'},"\n@Component({})\nexport class LoginComponent {\n  error$ = this.sessionQuery.selectError();\n\n  constructor(private sessionQuery: SessionQuery) {}\n}\n")))}d.isMDXComponent=!0}}]);