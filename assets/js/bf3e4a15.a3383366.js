"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[514],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9137:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={title:"Persist State"},l=void 0,p={unversionedId:"enhancers/persist-state",id:"enhancers/persist-state",title:"Persist State",description:"The persistState() function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the StorageEngine API, and restore it after a refresh.",source:"@site/docs/enhancers/persist-state.mdx",sourceDirName:"enhancers",slug:"/enhancers/persist-state",permalink:"/akita/docs/enhancers/persist-state",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/enhancers/persist-state.mdx",tags:[],version:"current",frontMatter:{title:"Persist State"},sidebar:"docs",previous:{title:"Devtools",permalink:"/akita/docs/enhancers/devtools"},next:{title:"Snapshot Manager",permalink:"/akita/docs/enhancers/snapshot"}},c={},u=[{value:"API",id:"api",level:2},{value:"<code>clearStore</code>",id:"clearstore",level:3},{value:"<code>destroy</code>",id:"destroy",level:3},{value:"Options",id:"options",level:2},{value:"<code>storage</code>",id:"storage",level:3},{value:"<code>key</code>",id:"key",level:3},{value:"<code>include</code>",id:"include",level:3},{value:"<code>select</code>",id:"select",level:3},{value:"<code>deserialize</code>",id:"deserialize",level:3},{value:"<code>serialize</code>",id:"serialize",level:3},{value:"<code>preStorageUpdateOperator</code>",id:"prestorageupdateoperator",level:3},{value:"<code>enableInNonBrowser</code>",id:"enableinnonbrowser",level:3},{value:"<code>persistOnDestroy</code>",id:"persistondestroy",level:3},{value:"Separate branch in storage",id:"separate-branch-in-storage",level:2},{value:"Custom Hooks",id:"custom-hooks",level:2},{value:"Async Support",id:"async-support",level:2},{value:"selectPersistStateInit",id:"selectpersiststateinit",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"persistState()")," function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageEngine")," API, and restore it after a refresh."),(0,o.kt)("p",null,"To use it you should call the ",(0,o.kt)("inlineCode",{parentName:"p"},"persistState()")," function. Here's an example of Angular's main file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},"import { persistState } from '@datorama/akita';\n\nconst storage = persistState();\n\nconst providers = [{ provide: 'persistStorage', useValue: storage }];\n\nplatformBrowserDynamic(providers)\n  .bootstrapModule(AppModule)\n  .catch((err) => console.log(err));\n")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"clearstore"},(0,o.kt)("inlineCode",{parentName:"h3"},"clearStore")),(0,o.kt)("p",null,"Clear the provided store from storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class TodosService {\n  constructor(@Inject('persistStorage') private persistStorage) {\n    persistStorage.clearStore('todos');\n    // Clear all\n    persistStorage.clearStore();\n  }\n}\n")),(0,o.kt)("h3",{id:"destroy"},(0,o.kt)("inlineCode",{parentName:"h3"},"destroy")),(0,o.kt)("p",null,"Stop sync the state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { PersistState } from '@datorama/akita';\n\nexport class TodosService {\n  constructor(@Inject('persistStorage') private persistStorage: PersistState) {}\n\n  stopSync() {\n    this.persistStorage.destroy();\n  }\n}\n")),(0,o.kt)("h2",{id:"options"},"Options"),(0,o.kt)("h3",{id:"storage"},(0,o.kt)("inlineCode",{parentName:"h3"},"storage")),(0,o.kt)("p",null,"storage strategy to use. This defaults to localStorage but you can pass sessionStorage or anything that implements the StorageEngine API."),(0,o.kt)("h3",{id:"key"},(0,o.kt)("inlineCode",{parentName:"h3"},"key")),(0,o.kt)("p",null,"The key by which the state is saved."),(0,o.kt)("h3",{id:"include"},(0,o.kt)("inlineCode",{parentName:"h3"},"include")),(0,o.kt)("p",null,"By default the whole state is saved to storage, use this param to include only the stores you need. It can be a store name or a predicate callback."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To store an ",(0,o.kt)("a",{parentName:"p",href:"/akita/docs/ui#entity-ui-state"},"entityUIStore")," you need to add ",(0,o.kt)("inlineCode",{parentName:"p"},"UI/{storeName}"),".")),(0,o.kt)("h3",{id:"select"},(0,o.kt)("inlineCode",{parentName:"h3"},"select")),(0,o.kt)("p",null,"By default the whole state is saved to storage, use this param to include only the data you need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { persistState, PersistStateSelectFn } from '@datorama/akita';\n\nconst selectToken: PersistStateSelectFn<AuthState> = (state) => ({ token: state.token });\nselectToken.storeName = 'auth';\n\npersistState({ select: [selectToken] });\n")),(0,o.kt)("h3",{id:"deserialize"},(0,o.kt)("inlineCode",{parentName:"h3"},"deserialize")),(0,o.kt)("p",null,"Custom deserializer. Defaults to JSON.parse"),(0,o.kt)("h3",{id:"serialize"},(0,o.kt)("inlineCode",{parentName:"h3"},"serialize")),(0,o.kt)("p",null,"Custom serializer, defaults to JSON.stringify"),(0,o.kt)("h3",{id:"prestorageupdateoperator"},(0,o.kt)("inlineCode",{parentName:"h3"},"preStorageUpdateOperator")),(0,o.kt)("p",null,"Custom operators that will run before storage update"),(0,o.kt)("h3",{id:"enableinnonbrowser"},(0,o.kt)("inlineCode",{parentName:"h3"},"enableInNonBrowser")),(0,o.kt)("p",null,"Whether to enable persistState in a non-browser environment"),(0,o.kt)("h3",{id:"persistondestroy"},(0,o.kt)("inlineCode",{parentName:"h3"},"persistOnDestroy")),(0,o.kt)("p",null,"Whether to persist the ",(0,o.kt)("inlineCode",{parentName:"p"},"cache")," value of dynamic store upon destroy"),(0,o.kt)("p",null,"You can also track a specific store's key. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"persistState({ include: ['auth.token'] });\n")),(0,o.kt)("h2",{id:"separate-branch-in-storage"},"Separate branch in storage"),(0,o.kt)("p",null,"By default when you provide ",(0,o.kt)("inlineCode",{parentName:"p"},"persistStorage"),", it means that all stores would be persisted under one key in ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," or other storage."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'settings' })\nexport class SettingsStore extends Store<SettingsState> {\n  constructor() {\n    super();\n  }\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'users' })\nexport class UsersStore extends Store<UsersState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n\nexport const persistStorage = persistState({\n  include: ['settings', 'users'],\n  key: 'myStore',\n});\n\nconst providers = [{ provide: 'persistStorage', useValue: storage }];\n")),(0,o.kt)("p",null,"In the example, all stores data would be saved in one ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," item with key ",(0,o.kt)("inlineCode",{parentName:"p"},"myStore"),";"),(0,o.kt)("p",null,"But, you also can provide a storage which would be saved in the separate ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," item:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'settings' })\nexport class SettingsStore extends Store<SettingsState> {\n  constructor() {\n    super();\n  }\n}\n\nexport const settingsPersistStorage = persistState({\n  include: ['settings'],\n  key: 'settingsStore',\n});\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'users' })\nexport class UsersStore extends Store<UsersState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n\nexport const usersPersistStorage = persistState({\n  include: ['users'],\n  key: 'usersStore',\n});\n\nconst providers = [\n  { provide: 'persistStorage', useValue: settingsPersistStorage, multi: true },\n  { provide: 'persistStorage', useValue: usersPersistStorage, multi: true },\n];\n")),(0,o.kt)("p",null,"Now, ",(0,o.kt)("inlineCode",{parentName:"p"},"SettingsStore")," would be saved in ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," under key ",(0,o.kt)("inlineCode",{parentName:"p"},"settingsStore")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UsersStore")," under ",(0,o.kt)("inlineCode",{parentName:"p"},"usersStore"),"."),(0,o.kt)("h2",{id:"custom-hooks"},"Custom Hooks"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"preStorageUpdate"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"preStoreUpdate")," hooks to get more control on the state.\nFor example, here is how we can save only specific keys from the ",(0,o.kt)("inlineCode",{parentName:"p"},"auth")," state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"persistState({\n  include: ['auth', 'todos'],\n  preStorageUpdate(storeName, state) {\n    if (storeName === 'auth') {\n      return {\n        token: state.token,\n        expired: state.expired,\n      };\n    }\n\n    return state;\n  },\n  preStoreUpdate(storeName, state) {\n    return state;\n  },\n});\n")),(0,o.kt)("p",null,"We can also control how the state is being saved and updated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"persistState({\n  include: ['auth', 'products'],\n  preStorageUpdate(storeName, state) {\n    if (storeName === 'products') {\n      return {\n        sort: state.ui.filters.sort,\n      };\n    }\n\n    return state;\n  },\n  preStoreUpdate(storeName, state, initialState) {\n    if (storeName === 'products') {\n      return {\n        ui: {\n          filters: {\n            ...initialState.ui.filters,\n            sort: state.sort,\n          },\n        },\n      };\n    }\n\n    return state;\n  },\n});\n")),(0,o.kt)("h2",{id:"async-support"},"Async Support"),(0,o.kt)("p",null,"This gives you the option to save a store\u2019s value to a persistent storage, such as indexDB, websql, or any other asynchronous API. Here\u2019s an example that leverages ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/localForage/localForage"},"localForage"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import * as localForage from 'localforage';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'Akita',\n  version: 1.0,\n  storeName: 'akita-storage',\n});\n\npersistState({ include: ['auth.token', 'todos'], storage: localForage });\n")),(0,o.kt)("h2",{id:"selectpersiststateinit"},"selectPersistStateInit"),(0,o.kt)("p",null,"Akita also exposes the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectPersistStateInit")," observable. This observable emits after Akita initialized the stores based on the storage's value. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectPersistStateInit } from '@datorama/akita';\n\nexport class AuthGuard {\n  constructor(private router: Router, private authQuery: AuthQuery) {}\n\n  canActivate() {\n    return combineLatest([this.authQuery.isLoggedIn$, selectPersistStateInit()]).pipe(\n      map(([isAuth]) => {\n        if (isAuth) return true;\n        this.router.navigateByUrl('login');\n        return false;\n      }),\n      take(1)\n    );\n  }\n}\n")),(0,o.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,o.kt)("p",null,"By default, the plugin will update the storage upon each store's change. Some applications perform multiple updates in a second, and update the storage on each change can be costly."),(0,o.kt)("p",null,"For such cases, it's recommended to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"preStorageUpdateOperator")," option and add a ",(0,o.kt)("inlineCode",{parentName:"p"},"debounce"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { debounceTime } from 'rxjs';\n\npersistState({\n  include: ['auth.token', 'todos'],\n  preStorageUpdateOperator: () => debounceTime(2000),\n});\n")))}m.isMDXComponent=!0}}]);