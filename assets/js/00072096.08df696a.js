"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[5852],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(n),m=i,f=l["".concat(s,".").concat(m)]||l[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:i,o[1]=c;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5600:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],c={title:"Optimistic Updates"},s=void 0,p={unversionedId:"additional/optimstic-updates",id:"additional/optimstic-updates",title:"Optimistic Updates",description:"When performing optimistic updates, the UI adds a new entity to the store before the server request responded with the actual data.",source:"@site/docs/additional/optimstic-updates.mdx",sourceDirName:"additional",slug:"/additional/optimstic-updates",permalink:"/akita/docs/additional/optimstic-updates",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/optimstic-updates.mdx",tags:[],version:"current",frontMatter:{title:"Optimistic Updates"}},d={},l=[],u={toc:l};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When performing optimistic updates, the UI adds a new entity to the store before the server request responded with the actual data.\nOne approach to this is to create a temporary entity id on the client-side and later update it with the real id when the server request is finished.\nTo track id changes of entities in a store Akita provides the RxJS operator ",(0,a.kt)("inlineCode",{parentName:"p"},"trackIdChanges(query: QueryEntity)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { trackIdChanges } from '@datorama/akita';\n\nquery.selectEntity(1).pipe(trackIdChanges(query)).subscribe(entity => {\n  /* ... */\n});\n\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Operators preceding ",(0,a.kt)("inlineCode",{parentName:"p"},"trackIdChanges")," in the same RxJS pipeline will only run once and are then discarded.")),(0,a.kt)("p",null,"By applying the ",(0,a.kt)("inlineCode",{parentName:"p"},"trackIdChanges")," operator on a query, the query gets rebuild each time the id changes.\nThis also means that all successive operators in the same pipeline get re-evaluated, but preceding operators will be discarded.\nThe project function argument of ",(0,a.kt)("inlineCode",{parentName:"p"},"selectEntity(id, project)")," is also discarded on id changes."),(0,a.kt)("p",null,"In the following example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"filter()")," operator, and the project function of ",(0,a.kt)("inlineCode",{parentName:"p"},"selectEntity()")," will only run once and be discarded:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"\nquery.selectEntity(1).pipe(filter(entity => entity.done), trackIdChanges(query)).subscribe(entity => {\n  /* ... */\n});\n\nquery.selectEntity(1, entity => entity.done).pipe(trackIdChanges(query)).subscribe(entity => {\n  /* ... */\n});\n\n")))}m.isMDXComponent=!0}}]);