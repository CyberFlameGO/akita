"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[4067],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},296:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),s=["components"],i={title:"Success/Error Handling"},c=void 0,l={unversionedId:"additional/notifications",id:"additional/notifications",title:"Success/Error Handling",description:"When we perform an HTTP request, we want to notify the user whether it succeeded or not. There are several methodologies you can use to do that:",source:"@site/docs/additional/notifications.mdx",sourceDirName:"additional",slug:"/additional/notifications",permalink:"/akita/docs/additional/notifications",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/notifications.mdx",tags:[],version:"current",frontMatter:{title:"Success/Error Handling"},sidebar:"docs",previous:{title:"Array Utils",permalink:"/akita/docs/additional/array"},next:{title:"Plain JS Usage",permalink:"/akita/docs/additional/js"}},u={},p=[{value:"Local Component State",id:"local-component-state",level:2},{value:"Store&#39;s State",id:"stores-state",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When we perform an HTTP request, we want to notify the user whether it succeeded or not. There are several methodologies you can use to do that:"),(0,a.kt)("h2",{id:"local-component-state"},"Local Component State"),(0,a.kt)("p",null,"A local component state is useful when only the current component needs to know about the request's ",(0,a.kt)("inlineCode",{parentName:"p"},"status"),", so we can set it once in the component and forget about it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"class TodosService {\n  updateTodo() {\n    return this.http.post().pipe(\n      tap(() => this.store.updateEntity()\n    )\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.component.ts"',title:'"todos.component.ts"'},'@Component({\n  template: `\n    <div *ngIf="error">{{ error }}</div>\n    <div *ngIf="success">Success!!</div>\n  `\n})\nclass TodosComponent {\n  updateTodo() {\n    this.todosService.updateTodo().subscribe({\n      next: () => (this.success = true),\n      error: error => (this.error = `\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f`)\n    })\n  }\n}\n')),(0,a.kt)("p",null,"The benefit is that we don't need to save the ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," in the store and ",(0,a.kt)("inlineCode",{parentName:"p"},"reset")," it on destroy."),(0,a.kt)("p",null,"A different case is when you don't need to show the ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," in the component because you're using a global ",(0,a.kt)("inlineCode",{parentName:"p"},"alert")," design, for example. In such a case, you can handle it directly on the service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { throwError } from 'rxjs';\n\nclass TodosService {\n  constructor(private toaster: Toaster) {}\n  \n  updateTodo() {\n    return this.http.post().pipe(\n      tap(() => {\n        this.store.updateEntity();\n        this.toaster.success(`\ud83e\udd84`);\n      }),\n      catchError((err) => {\n        this.toaster.error(`\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f`);\n        return throwError(err);  \n      })\n    )\n  }\n}\n")),(0,a.kt)("h2",{id:"stores-state"},"Store's State"),(0,a.kt)("p",null,"If you want to communicate the error to other components or services you can save the ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," in the store:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"class TodosService {\n  constructor(private toaster: Toaster) {}\n  \n  updateTodo() {\n    return this.http.post().pipe(\n      tap(() => this.store.updateEntity()),\n      catchError((err) => {\n        this.store.setError(`\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f`);\n        return throwError(err); \n      })\n    )\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.component.ts"',title:'"todos.component.ts"'},'@Component({\n  template: `<div *ngIf="error$ | async as err">{{ err }}</div>`\n})\nclass TodosComponent {\n  error$ = this.todosQuery.selectError();\n  \n  updateTodo() {\n    this.todosService.updateTodo().subscribe();\n  }\n}\n')))}m.isMDXComponent=!0}}]);