"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[5734],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},v=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(n),v=a,m=p["".concat(l,".").concat(v)]||p[v]||u[v]||r;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=v;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}v.displayName="MDXCreateElement"},9131:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var i=n(3117),a=n(102),r=(n(7294),n(3905)),o=["components"],c={title:"Active Entity"},l=void 0,s={unversionedId:"entities/active",id:"entities/active",title:"Active Entity",description:"The store supports having an active property, holding the active entity's id. This can prove to be very useful in cases where you want to interact with the entity that is currently active.",source:"@site/docs/entities/active.mdx",sourceDirName:"entities",slug:"/entities/active",permalink:"/akita/docs/entities/active",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/entities/active.mdx",tags:[],version:"current",frontMatter:{title:"Active Entity"},sidebar:"docs",previous:{title:"Query Entity",permalink:"/akita/docs/entities/query-entity"},next:{title:"Sorting",permalink:"/akita/docs/entities/sorting"}},d={},p=[{value:"API",id:"api",level:2},{value:"<code>setActive</code>",id:"setactive",level:3},{value:"<code>updateActive</code>",id:"updateactive",level:3},{value:"<code>selectActiveId</code>",id:"selectactiveid",level:3},{value:"<code>selectActive</code>",id:"selectactive",level:3},{value:"<code>getActiveId</code>",id:"getactiveid",level:3},{value:"<code>getActive</code>",id:"getactive",level:3},{value:"<code>hasActive</code>",id:"hasactive",level:3},{value:"Multiple Active Entities",id:"multiple-active-entities",level:2},{value:"<code>setActive</code>",id:"setactive-1",level:3},{value:"<code>addActive</code>",id:"addactive",level:3},{value:"<code>removeActive</code>",id:"removeactive",level:3},{value:"<code>toggleActive</code>",id:"toggleactive",level:3}],u={toc:p};function v(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The store supports having an ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," property, holding the active entity's ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),". This can prove to be very useful in cases where you want to interact with the entity that is currently active."),(0,r.kt)("p",null,"Here's how to set it up:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{3} title="todos.store.ts"',"{3}":!0,title:'"todos.store.ts"'},"import { EntityState, ActiveState, StoreConfig, EntityStore } from '@datorama/akita';\n\nexport interface TodosState extends EntityState<Todo, number>, ActiveState {}\n\n@StoreConfig({ name: 'todos' })\nexport class TodosStore extends EntityStore<TodosState> {\n  constructor() {\n    super();\n  }\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'You can use the store or feature schematics with the flag --withActive="Active" to generate a store which ActiveState.')),(0,r.kt)("p",null,"The Store provides the following methods to update and query the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," state:"),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"setactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"setActive")),(0,r.kt)("p",null,"Set the given entity ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," as active:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.setActive(entityId);\nstore.setActive(null);\n")),(0,r.kt)("h3",{id:"updateactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateActive")),(0,r.kt)("p",null,"Update the active entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.updateActive({ name: newName });\n\nstore.updateActive((active) => {\n  return {\n    config: {\n      ...active.config,\n      date,\n    },\n  };\n});\n")),(0,r.kt)("p",null,"It\u2019s possible to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"previous")," entity as ",(0,r.kt)("inlineCode",{parentName:"p"},"active"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.setActive({ prev: true });\nstore.setActive({ next: true });\n")),(0,r.kt)("p",null,"By default, if the active entity is the last one and you select to activate the next entity, it will loop to the beginning and make the first one active. If you want to disable this behavior set the ",(0,r.kt)("inlineCode",{parentName:"p"},"wrap")," parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.setActive({ next: true, wrap: false });\n")),(0,r.kt)("h3",{id:"selectactiveid"},(0,r.kt)("inlineCode",{parentName:"h3"},"selectActiveId")),(0,r.kt)("p",null,"Select the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," entity's ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"activeId$ = query.selectActiveId();\n")),(0,r.kt)("h3",{id:"selectactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"selectActive")),(0,r.kt)("p",null,"Select the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," entity: (don't forget to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveState")," interface in your store's state)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"activeEntity$ = query.selectActive();\nactiveTitle$ = query.selectActive(({ title }) => title);\n")),(0,r.kt)("h3",{id:"getactiveid"},(0,r.kt)("inlineCode",{parentName:"h3"},"getActiveId")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," entity ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const activeId = query.getActiveId();\n")),(0,r.kt)("h3",{id:"getactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"getActive")),(0,r.kt)("p",null,"Get the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const active = query.getActive();\n")),(0,r.kt)("h3",{id:"hasactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"hasActive")),(0,r.kt)("p",null,"Whether an active entity is set:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"if (this.query.hasActive()) {\n}\nif (this.query.hasActive(id)) {\n}\n")),(0,r.kt)("h2",{id:"multiple-active-entities"},"Multiple Active Entities"),(0,r.kt)("p",null,"In addition to having one active entity, there are times when we need to manage multiple active entities. Here is how to do it with Akita:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{3} title="todos.store.ts"',"{3}":!0,title:'"todos.store.ts"'},"import { EntityState, MultiActiveState, StoreConfig } from '@datorama/akita';\n\nexport interface TodosState extends EntityState<Todo, number>, MultiActiveState {}\n\nconst initialState = {\n  active: [],\n};\n\n@StoreConfig({ name: 'todos' })\nexport class TodosStore extends EntityStore<TodosState> {\n  constructor() {\n    super(initialState);\n  }\n}\n")),(0,r.kt)("p",null,"Unlike working with a single active entity, we've added the ",(0,r.kt)("inlineCode",{parentName:"p"},"MultiActiveState")," interface and set the initial state of the ",(0,r.kt)("inlineCode",{parentName:"p"},"active")," property to an empty array."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'You can use the store or feature schematics with the flag --withActive="MultiActive" to generate a store which ActiveState.')),(0,r.kt)("p",null,"In addition to the methods of working with a single active entity, we will also receive the following methods:"),(0,r.kt)("h3",{id:"setactive-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"setActive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.setActive([id, id, id]);\n")),(0,r.kt)("h3",{id:"addactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"addActive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.addActive(id);\n")),(0,r.kt)("h3",{id:"removeactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"removeActive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.removeActive(id);\n")),(0,r.kt)("h3",{id:"toggleactive"},(0,r.kt)("inlineCode",{parentName:"h3"},"toggleActive")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"store.toggleActive(id);\n")))}v.isMDXComponent=!0}}]);