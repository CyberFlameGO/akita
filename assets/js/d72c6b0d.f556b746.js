"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[9364],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=u(n),d=a,h=l["".concat(c,".").concat(d)]||l[d]||m[d]||o;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8173:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={title:"Transactions"},c=void 0,u={unversionedId:"transactions",id:"transactions",title:"Transactions",description:"Transactions are an optimization for performing multiple operations on the store. Let's say we have the following store and query:",source:"@site/docs/transactions.mdx",sourceDirName:".",slug:"/transactions",permalink:"/akita/docs/transactions",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/transactions.mdx",tags:[],version:"current",frontMatter:{title:"Transactions"},sidebar:"docs",previous:{title:"UI State",permalink:"/akita/docs/ui"},next:{title:"Best Practices",permalink:"/akita/docs/best-practices"}},p={},l=[{value:"combineQueries",id:"combinequeries",level:2}],m={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Transactions are an optimization for performing multiple operations on the store. Let's say we have the following store and query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.store.ts"',title:'"auth.store.ts"'},"function createInitialState(): AuthState {\n  return {\n    firstName: '',\n    token: ''\n  };\n}\n\n@StoreConfig({ name: 'auth' })\nclass AuthStore extends Store<AuthState> {\n\n  constructor() {\n    super(createInitialState());\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.query.ts"',title:'"auth.query.ts"'},"export class AuthQuery extends query<AuthState> {\n\n  constructor(protected store: AuthStore) {\n    super(store);\n  }\n}\n")),(0,o.kt)("p",null,"And we want to query the entire state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const authState$ = authQuery.select();\nconst subscription = authState$.subscribe();\n")),(0,o.kt)("p",null,"Now let's say we need to update the same store a couple of times on the same ",(0,o.kt)("inlineCode",{parentName:"p"},"tick"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"update(token: string) {\n  this.store.update({ token });\n  this.store.setLoading(false);\n}\n")),(0,o.kt)("p",null,"This will trigger the ",(0,o.kt)("inlineCode",{parentName:"p"},"authState$")," subscriber ",(0,o.kt)("inlineCode",{parentName:"p"},"twice"),", something we want to avoid. In cases like these Akita's ",(0,o.kt)("inlineCode",{parentName:"p"},"transactions")," come in handy - they ensures that a dispatch occurs only after all the store actions defined in the transaction have been called. "),(0,o.kt)("p",null,"We can use them as decorators, functions or operators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { \n  transaction, \n  applyTransaction, \n  withTransaction } \nfrom '@datorama/akita';\n\n@transaction()\nupdate() {\n   this.store.update();\n   this.store.setLoading(true);\n}\n\nupdate() {\n  applyTransaction(() => {\n    this.store.update();\n    this.store.setActive(1);\n  });\n}\n\nupdate() {\n  return http.get().pipe(\n    withTransaction(response => {\n       this.store.update(response);\n       this.store.setActive(1);\n    })\n  )\n}\n")),(0,o.kt)("p",null,"Now the store will dispatch the new values only ",(0,o.kt)("strong",{parentName:"p"},"once"),", after the final update has finished."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Transaction also works when updating multiple stores. For example:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"queryOne.select().subscribe(value => {\n  const fromOtherQuery = queryTwo.getValue();\n})\n")),(0,o.kt)("p",{parentName:"admonition"},"When updating both stores inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"transaction"),", you'll have a guarantee that the value of both will be up to date inside the query selector.")),(0,o.kt)("h2",{id:"combinequeries"},"combineQueries"),(0,o.kt)("p",null,"Akita provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"combineQueries")," observable, which is useful in cases where we need to return data from our store, combined with data arriving from additional queries, like ",(0,o.kt)("inlineCode",{parentName:"p"},"combineLatest"),". One example of this is combining data from other stores:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="movies.query.ts"',title:'"movies.query.ts"'},"import { combineQueries } from '@datorama/akita';\n\nexport class MoviesQuery extends QueryEntity<MoviesState> {\n\n  constructor(protected store: MoviesStore, \n              private actorsQuery: ActorsQuery, \n              private genresQuery: GenresQuery) {\n    super(store);\n  }\n\n  selectMovies() {\n    return combineQueries([\n      this.selectAll(), \n      this.actorsQuery.selectAll({ asObject: true }), \n      this.genresQuery.selectAll({ asObject: true })\n     ]\n    )\n    .pipe(\n      map(([movies, actors, genres]) => {\n        return movies.map(movie => {\n          return {\n            ...movie,\n            actors: movie.actors.map(actorId => actors[actorId]),\n            genres: movie.genres.map(genreId => genres[genreId])\n          };\n        });\n      })\n    );\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="movies.service.ts"',title:'"movies.service.ts"'},"import { withTransaction } from '@datorama/akita';\n\nexport class MoviesService {\n  constructor(private moviesStore: MoviesStore,\n              private actorsStore: ActorsStore, \n              private genresStore: GenresStore) {}\n\n  getMovies() {\n    return http.get().pipe(\n      withTransaction(response => {\n        this.actorsStore.set(response.entities.actors);\n        this.genresStore.set(response.entities.genres);\n        const movies = {\n          entities: response.entities.movies,\n          ids: response.result\n        };\n        this.moviesStore.set(movies);\n      })\n    );\n  }\n}\n")),(0,o.kt)("p",null,"In our service, when we fetch the ",(0,o.kt)("inlineCode",{parentName:"p"},"movies")," and update the store, we wrap it in a ",(0,o.kt)("inlineCode",{parentName:"p"},"transaction"),", and in the query, when selecting the movies, we use the ",(0,o.kt)("inlineCode",{parentName:"p"},"combineQueries")," operator in order to combine the movie data with the actors & genres data from the other stores. This will make sure that our subscribers will receive a ",(0,o.kt)("inlineCode",{parentName:"p"},"single")," notification, instead of one per update."))}d.isMDXComponent=!0}}]);