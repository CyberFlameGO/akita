"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[7289],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return y}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=n,y=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return a?r.createElement(y,i(i({ref:t},p),{},{components:a})):r.createElement(y,i({ref:t},p))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7657:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=a(3117),n=a(102),o=(a(7294),a(3905)),i=["components"],s={title:"Array Utils"},l="Entity Store Usage",c={unversionedId:"additional/array",id:"additional/array",title:"Array Utils",description:"Let\u2019s say we have the following EntityStore:",source:"@site/docs/additional/array.mdx",sourceDirName:"additional",slug:"/additional/array",permalink:"/akita/docs/additional/array",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/array.mdx",tags:[],version:"current",frontMatter:{title:"Array Utils"},sidebar:"docs",previous:{title:"Custom Operators",permalink:"/akita/docs/additional/operators"},next:{title:"Success/Error Handling",permalink:"/akita/docs/additional/notifications"}},p={},m=[{value:"API",id:"api",level:2},{value:"<code>arrayAdd</code>",id:"arrayadd",level:3},{value:"<code>arrayRemove</code>",id:"arrayremove",level:3},{value:"<code>arrayUpdate</code>",id:"arrayupdate",level:3},{value:"<code>arrayUpsert</code>",id:"arrayupsert",level:3},{value:"<code>arrayToggle</code>",id:"arraytoggle",level:3},{value:"Store Usage",id:"store-usage",level:2},{value:"Query Helper",id:"query-helper",level:2}],d={toc:m};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entity-store-usage"},"Entity Store Usage"),(0,o.kt)("p",null,"Let\u2019s say we have the following ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityStore"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="articles.store.ts"',title:'"articles.store.ts"'},"interface Comment {\n  id: ID;\n  text: string;\n}\n\ninterface Article {\n  id: ID;\n  comments: Comment[];\n  title: string;\n}\n\ninterface ArticlesState extends EntityState<Article, number> {}\n\n@StoreConfig({ name: 'articles' })\nclass ArticlesStore extends EntityStore<ArticlesState> {}\n")),(0,o.kt)("p",null,"We have an ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityStore")," which holds a collection of articles. Each ",(0,o.kt)("inlineCode",{parentName:"p"},"article")," holds an array of ",(0,o.kt)("inlineCode",{parentName:"p"},"comments"),". Akita provides helper methods that take care of the grunt work."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"arrayadd"},(0,o.kt)("inlineCode",{parentName:"h3"},"arrayAdd")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayAdd } from '@datorama/akita';\n\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayAdd(comments, newComments)\n}));\n")),(0,o.kt)("h3",{id:"arrayremove"},(0,o.kt)("inlineCode",{parentName:"h3"},"arrayRemove")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayRemove } from '@datorama/akita';\n\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayRemove(comments, ids)\n}));\n\n// Remove by predicate\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayRemove(comments, predicateFn)\n}));\n")),(0,o.kt)("h3",{id:"arrayupdate"},(0,o.kt)("inlineCode",{parentName:"h3"},"arrayUpdate")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayUpdate } from '@datorama/akita';\n\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayUpdate(comments, id/s, { text: 'New text' })\n}));\n\n// Update by predicate\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayUpdate(comments, predicateFn, { text: 'New text' })\n}));\n")),(0,o.kt)("h3",{id:"arrayupsert"},(0,o.kt)("inlineCode",{parentName:"h3"},"arrayUpsert")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayUpsert } from '@datorama/akita';\n\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayUpsert(comments, id, { text: 'New text' })\n}));\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The first parameter is ",(0,o.kt)("strong",{parentName:"p"},"typed"),", so you\u2019ll get intelligent code completion suggesting only keys that are typed as ",(0,o.kt)("inlineCode",{parentName:"p"},"Array"),".")),(0,o.kt)("p",null,"Each function takes an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"idKey")," which defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"articlesStore.update(1, ({ comments }) => ({\n  comments: arrayUpdate(comments, 3, { text: 'New text' }, 'comment_id')\n}));\n")),(0,o.kt)("h3",{id:"arraytoggle"},(0,o.kt)("inlineCode",{parentName:"h3"},"arrayToggle")),(0,o.kt)("p",null,"Adds a value to an array if it doesn't exist yet or removes it if already present. Objects are compared by identity by default.\nYou can override it by providing a custom compare function."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Akita provides two common comparators for ",(0,o.kt)("inlineCode",{parentName:"p"},"arrayToggle"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"byId()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"byKey(key: string)")," compare function.")),(0,o.kt)("p",null,"Toggling an array of objects:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayToggle } from '@datorama/akita';\n\narticlesStore.update(1, ({ comments }) => ({\n  comments: arrayToggle(comments, { id: 1, text: 'New text' }, byId())\n}));\n")),(0,o.kt)("p",null,"Toggling an array of primitive values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayToggle } from '@datorama/akita';\n\narrayToggle(['a', 'b'], 'c'); // returns ['a', 'b', 'c']\narrayToggle(['a', 'b', 'c'], 'b'); // returns ['a', 'c']\n")),(0,o.kt)("h2",{id:"store-usage"},"Store Usage"),(0,o.kt)("p",null,"We can use the same helpers for properties belongs to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Store"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="auth.store.ts"',title:'"auth.store.ts"'},"import { arrayAdd } from '@datorama/akita';\n\nexport interface AuthState {\n  permissions: string[];\n}\n\n@StoreConfig({ name: 'auth' })\nexport class AuthStore extends Store<AuthState> {\n   constructor() {\n     super({ permissions: [] });\n   }\n\n   addPermission(permission: string) {\n     this.update(({ permissions }) => ({\n       permissions: arrayAdd(permissions, 'ADMIN')\n     }));\n   }\n}\n")),(0,o.kt)("h2",{id:"query-helper"},"Query Helper"),(0,o.kt)("p",null,"That takes care of the CRUD operations, but we also have some good stuff added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Query"),"; Akita now provides a special operator to query specific items from a collection - ",(0,o.kt)("inlineCode",{parentName:"p"},"arrayFind"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { arrayFind } from '@datorama/akita';\n\nconst selectComment$ = this.articlesQuery\n .selectEntity(1, 'comments')\n .pipe(arrayFind(commentId))\n\nconst selectComments$ = this.articlesQuery\n .selectEntity(1, 'comments')\n .pipe(arrayFind([id, id, id]))\n\nconst selectCommentsByPredicate$ = this.articlesQuery\n  .selectEntity(1, 'comments')\n  .pipe(arrayFind(comment => comment.text.includes(..)))\n\nconst admins$ = authQuery\n   .select('permissions')\n   .pipe(arrayFind(permission => permission === 'ADMIN'));\n")),(0,o.kt)("p",null,"The added advantage is that these observables ",(0,o.kt)("strong",{parentName:"p"},"will only fire if one of the items in the resulting collection has been modified"),", via an update, add or delete operation."))}u.isMDXComponent=!0}}]);