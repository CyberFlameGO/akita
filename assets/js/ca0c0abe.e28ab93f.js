"use strict";(self.webpackChunkakita_docs=self.webpackChunkakita_docs||[]).push([[9129],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3826:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],c={title:"Caching Support"},s=void 0,l={unversionedId:"additional/cache",id:"additional/cache",title:"Caching Support",description:"Akita has built-in cache support that will provide information about whether you already have data in the store. For example, in many cases we want to perform an HTTP request only once, and from that point on, to get the cached data from the store.",source:"@site/docs/additional/cache.mdx",sourceDirName:"additional",slug:"/additional/cache",permalink:"/akita/docs/additional/cache",draft:!1,editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/additional/cache.mdx",tags:[],version:"current",frontMatter:{title:"Caching Support"},sidebar:"docs",previous:{title:"Using Immer",permalink:"/akita/docs/immer"},next:{title:"Store Middleware",permalink:"/akita/docs/additional/middleware"}},p={},u=[],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Akita has built-in cache support that will provide information about whether you already have data in the store. For example, in many cases we want to perform an HTTP request only once, and from that point on, to get the cached data from the store."),(0,o.kt)("p",null,"Now, when we call ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityStore.set()"),", Akita internally marks the store as ",(0,o.kt)("inlineCode",{parentName:"p"},"cached"),". We can also manually mark the store as cached by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"Store.setHasCache(boolean)")," method."),(0,o.kt)("p",null,"Akita exposes two query methods that you can use to query the ",(0,o.kt)("inlineCode",{parentName:"p"},"cache")," value - ",(0,o.kt)("inlineCode",{parentName:"p"},"selectHasCache()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"getHasCache()"),"."),(0,o.kt)("p",null,"In addition to that, it exposes the ",(0,o.kt)("inlineCode",{parentName:"p"},"cacheable")," function.\nThis method takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"Store")," and an ",(0,o.kt)("inlineCode",{parentName:"p"},"observable"),".\nWhen we call it, it'll subscribe to the ",(0,o.kt)("inlineCode",{parentName:"p"},"observable")," only if the ",(0,o.kt)("inlineCode",{parentName:"p"},"cache")," value is currently ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".\nOtherwise, it'll return ",(0,o.kt)("inlineCode",{parentName:"p"},"EMPTY")," observable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.service.ts"',title:'"products.service.ts"'},"import { cacheable } from '@datorama/akita';\n\nexport class ProductsService {\n  constructor(private productsStore: ProductsStore,\n              private http: Http) {}\n\n  getProducts() {\n    const request$ = this.http.get().pipe(\n      tap(products => productsStore.set(products)\n    );\n\n    return cacheable(this.productsStore, request$);\n  }\n}\n")),(0,o.kt)("p",null,"But that\u2019s not all\u200a\u2014\u200awe can also define a ",(0,o.kt)("inlineCode",{parentName:"p"},"ttl")," (time to live) which when expires will automatically invalidate the cache for you. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.store.ts"',title:'"products.store.ts"'},"@StoreConfig({\n  name: 'products',\n  cache: {\n    ttl: 3600000\n  }\n})\nexport class ProductsStore extends EntityStore<ProductsState> {\n  constructor() {\n    super();\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="products.service.ts"',title:'"products.service.ts"'},"import { EMPTY } from 'rxjs';\n\nexport class ProductsService {\n  constructor(private productsStore: ProductsStore,\n              private productsQuery: ProductsQuery,\n              private http: Http) {}\n\n  getProducts() {\n    return this.productsQuery.selectHasCache().pipe(\n      switchMap(hasCache => {\n         const apiCall = this.http.get(..).pipe(\n           tap(products => this.productsStore.set(products))\n         );\n\n         return hasCache ? EMPTY : apiCall;\n      })\n    )\n  }\n}\n")),(0,o.kt)("p",null,"In the code above, every hour Akita invalidates the cache, which causes the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectHasCache()")," stream to fire, causing the products to be fetched again from the server."))}h.isMDXComponent=!0}}]);