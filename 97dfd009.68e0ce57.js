(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||r;return n?i.a.createElement(m,s(s({ref:t},l),{},{components:n})):i.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),r=(n(0),n(108)),o={title:"UI State"},s={unversionedId:"ui",id:"ui",isDocsHomePage:!1,title:"UI State",description:"Akita recommends separating the Domain State from the UI State. Domain State is the state of your application in the server side, while the UI state is more along the lines of the current time based on the user\u2019s machine, which tab is active tab, or whether a drop-down is open.",source:"@site/docs/ui.mdx",slug:"/ui",permalink:"/akita/docs/ui",editUrl:"https://github.com/datorama/akita/edit/master/docs/docs/ui.mdx",version:"current",sidebar:"docs",previous:{title:"Sorting",permalink:"/akita/docs/entities/sorting"},next:{title:"Transactions",permalink:"/akita/docs/transactions"}},c=[{value:"Global UI State",id:"global-ui-state",children:[]},{value:"Entity UI State",id:"entity-ui-state",children:[{value:"Initial Entity State",id:"initial-entity-state",children:[]}]}],l={rightToc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Akita recommends separating the Domain State from the UI State. Domain State is the state of your application in the server side, while the UI state is more along the lines of the current time based on the user\u2019s machine, which tab is active tab, or whether a drop-down is open."),Object(r.b)("p",null,"Here are two ways to manage the UI state:"),Object(r.b)("h2",{id:"global-ui-state"},"Global UI State"),Object(r.b)("p",null,"When you have a global UI state for a specific store, you can put the state under a ui key. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todos.store.ts"',title:'"todos.store.ts"'}),"export interface TodosState extends EntityState<Todo, number> {\n  ui: {\n    filter: VISIBILITY_FILTER;\n  };\n}\n\nconst initialState = {\n  ui: { filter: VISIBILITY_FILTER.SHOW_ALL }\n};\n\n@StoreConfig({ name: 'todos' })\nexport class TodosStore extends EntityStore<TodosState> {\n  constructor() {\n    super(initialState);\n  }\n  \n  updateFilter(filter: VISIBILITY_FILTER) {\n    this.update({ ui: { filter } } )\n  }\n}\n")),Object(r.b)("p",null,"And create a selector in the query:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todos.query.ts"',title:'"todos.query.ts"'}),"export class TodosQuery extends QueryEntity<TodosState> {\n  selectVisibilityFilter$ = this.select(state => state.ui.filter);\n  \n  constructor(protected store: TodosStore) {\n    super(store);\n  }\n}\n")),Object(r.b)("h2",{id:"entity-ui-state"},"Entity UI State"),Object(r.b)("p",null,"There are times when we need to have an entity-based UI state. For example, we need to know if the current entity is open or loading, etc. For such cases, we've added a built-in UI store and an accompanying UI query that you can create on demand."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="movies.store.ts"',title:'"movies.store.ts"'}),"import { \n  EntityState, \n  EntityStore, \n  EntityUIStore, \n  StoreConfig } \nfrom '@datorama/akita';\n\nexport type MovieUI {\n  isOpen: boolean;\n  isLoading: boolean;\n}\n\nexport type Movie = { id: number, title: string }\n\nexport interface MoviesState extends EntityState<Movie> {}\nexport interface MoviesUIState extends EntityState<MovieUI> {}\n\n@StoreConfig({ name: 'movies' })\nexport class MoviesStore extends EntityStore<MoviesState> {\n  ui: EntityUIStore<MoviesUIState>;\n\n  constructor() {\n    super();\n    this.createUIStore();\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="movies.query.ts"',title:'"movies.query.ts"'}),"import { EntityUIQuery, ID, QueryEntity } from '@datorama/akita';\n\nexport class MoviesQuery extends QueryEntity<MoviesState> {\n  ui: EntityUIQuery<MoviesUIState>;\n\n  constructor(protected store: MoviesStore) {\n    super(store);\n    this.createUIQuery();\n  }\n}\n")),Object(r.b)("p",null,"The only thing we need to do is to add the ui property, passing the entity UI interface, and call the ",Object(r.b)("inlineCode",{parentName:"p"},"createUIStore()")," in the store and ",Object(r.b)("inlineCode",{parentName:"p"},"createUIQuery()")," in the query."),Object(r.b)("p",null,"With this setup, Akita will instantiate a new ",Object(r.b)("inlineCode",{parentName:"p"},"EntityStore")," and ",Object(r.b)("inlineCode",{parentName:"p"},"EntityQuery")," under the ",Object(r.b)("inlineCode",{parentName:"p"},"ui")," property, that will be responsible for managing the entity UI state."),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"If you\u2019re working with Akita\u2019s dev-tools, you\u2019ll see the new store prefixed with the UI keyword."))),Object(r.b)("h3",{id:"initial-entity-state"},"Initial Entity State"),Object(r.b)("p",null,"It's possible to pass an initial entity state in the UI store:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'{8,12} title="movies.store.ts"',"{8,12}":!0,title:'"movies.store.ts"'}),"@StoreConfig({ name: 'movies' })\nexport class MoviesStore extends EntityStore<MoviesState> {\n  ui: EntityUIStore<MoviesUIState>;\n\n  constructor() {\n    super();\n    const defaults = { isLoading: false, isOpen: true };\n    this.createUIStore().setInitialEntityState(defaults);\n    \n    // Or if you need the entity object\n    const defaults = entity => ({ isLoading: false, isOpen: true });\n    this.createUIStore().setInitialEntityState(defaults);\n  }\n}\n")),Object(r.b)("p",null,"With this setup, each time we create a new entity for the encompassing entity store, by calling the ",Object(r.b)("inlineCode",{parentName:"p"},"set()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"add()")," methods, Akita automatically generates an accompanying UI entity for this entity with the values we specified. "),Object(r.b)("p",null,"In addition, whenever we ",Object(r.b)("inlineCode",{parentName:"p"},"remove")," the related entity from the model, Akita automatically removes the UI entity associated with it."))}p.isMDXComponent=!0}}]);