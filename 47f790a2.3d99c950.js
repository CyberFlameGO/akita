(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,b=u["".concat(s,".").concat(m)]||u[m]||h[m]||o;return n?a.a.createElement(b,c(c({ref:t},p),{},{components:n})):a.a.createElement(b,c({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(107)),s={title:"Snapshot Manager"},c={unversionedId:"enhancers/snapshot",id:"enhancers/snapshot",isDocsHomePage:!1,title:"Snapshot Manager",description:"There are times when saving the local state in the server becomes useful. For example, you may want to give the user a PDF representing their local state.",source:"@site/docs/enhancers/snapshot.mdx",slug:"/enhancers/snapshot",permalink:"/akita/docs/enhancers/snapshot",editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/enhancers/snapshot.mdx",version:"current",sidebar:"docs",previous:{title:"Persist State",permalink:"/akita/docs/enhancers/persist-state"},next:{title:"Akita CLI",permalink:"/akita/docs/enhancers/cli"}},i=[],p={rightToc:i};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"There are times when saving the local state in the server becomes useful. For example, you may want to give the user a PDF representing their local state.\nFor such cases, Akita provides the ",Object(o.b)("inlineCode",{parentName:"p"},"snapshotManager")," API."),Object(o.b)("p",null,"To get a snapshot of the whole application state, you can call the ",Object(o.b)("inlineCode",{parentName:"p"},"getStoresSnapshot()")," method:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'}),"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  saveState() {\n    this.http.post('/url', snapshotManager.getStoresSnapshot());\n  }\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"getStoresSnapshot()")," returns an object containing the whole application state. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n  "todos": {\n     "entities": { ... }\n   },\n   "cart": {\n     "entities": { ... }\n   },\n   "session": {\n     "firstName": "",\n     ...\n   }\n}\n')),Object(o.b)("p",null,"If you don't need the whole application state, you can pass the specific stores that you need:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'}),"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  saveState() {\n    const stores = ['todos', 'widgets'];\n    this.http.post('/url', snapshotManager.getStoresSnapshot(stores));\n  }\n}\n")),Object(o.b)("p",null,"It also works the other way around, when you get the snapshot from the server you can save it by calling the ",Object(o.b)("inlineCode",{parentName:"p"},"setStoresSnapshot() "),"method and passing the snapshot:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'}),"import { snapshotManager } from '@datorama/akita';\n\nexport class TodosService {\n  setSnapshotFromServer(snapshotFromServer) {\n    snapshotManager.setStoresSnapshot(snapshotFromServer);\n\n    // Support lazy stores\n    snapshotManager.setStoresSnapshot(snapshotFromServer, { lazy: true } );\n  }\n}\n")))}l.isMDXComponent=!0}}]);