(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(s,".").concat(u)]||d[u]||b[u]||o;return n?r.a.createElement(m,i(i({ref:t},l),{},{components:n})):r.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(107)),s={title:"Persist State"},i={unversionedId:"enhancers/persist-state",id:"enhancers/persist-state",isDocsHomePage:!1,title:"Persist State",description:"The persistState() function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the StorageEngine API, and restore it after a refresh.",source:"@site/docs/enhancers/persist-state.mdx",slug:"/enhancers/persist-state",permalink:"/akita/docs/enhancers/persist-state",editUrl:"https://github.com/salesforce/akita/edit/master/docs/docs/enhancers/persist-state.mdx",version:"current",sidebar:"docs",previous:{title:"Devtools",permalink:"/akita/docs/enhancers/devtools"},next:{title:"Snapshot Manager",permalink:"/akita/docs/enhancers/snapshot"}},c=[{value:"API",id:"api",children:[{value:"<code>clearStore</code>",id:"clearstore",children:[]},{value:"<code>destroy</code>",id:"destroy",children:[]}]},{value:"Options",id:"options",children:[{value:"<code>storage</code>",id:"storage",children:[]},{value:"<code>key</code>",id:"key",children:[]},{value:"<code>include</code>",id:"include",children:[]},{value:"<code>select</code>",id:"select",children:[]},{value:"<code>deserialize</code>",id:"deserialize",children:[]},{value:"<code>serialize</code>",id:"serialize",children:[]},{value:"<code>preStorageUpdateOperator</code>",id:"prestorageupdateoperator",children:[]},{value:"<code>enableInNonBrowser</code>",id:"enableinnonbrowser",children:[]},{value:"<code>persistOnDestroy</code>",id:"persistondestroy",children:[]}]},{value:"Separate branch in storage",id:"separate-branch-in-storage",children:[]},{value:"Custom Hooks",id:"custom-hooks",children:[]},{value:"Async Support",id:"async-support",children:[]},{value:"selectPersistStateInit",id:"selectpersiststateinit",children:[]},{value:"Performance Optimization",id:"performance-optimization",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"persistState()")," function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the ",Object(o.b)("inlineCode",{parentName:"p"},"StorageEngine")," API, and restore it after a refresh."),Object(o.b)("p",null,"To use it you should call the ",Object(o.b)("inlineCode",{parentName:"p"},"persistState()")," function. Here's an example of Angular's main file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'}),"import { persistState } from '@datorama/akita';\n\nconst storage = persistState();\n\nconst providers = [{ provide: 'persistStorage', useValue: storage }];\n\nplatformBrowserDynamic(providers)\n  .bootstrapModule(AppModule)\n  .catch((err) => console.log(err));\n")),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("h3",{id:"clearstore"},Object(o.b)("inlineCode",{parentName:"h3"},"clearStore")),Object(o.b)("p",null,"Clear the provided store from storage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class TodosService {\n  constructor(@Inject('persistStorage') private persistStorage) {\n    persistStorage.clearStore('todos');\n    // Clear all\n    persistStorage.clearStore();\n  }\n}\n")),Object(o.b)("h3",{id:"destroy"},Object(o.b)("inlineCode",{parentName:"h3"},"destroy")),Object(o.b)("p",null,"Stop sync the state:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { PersistState } from '@datorama/akita';\n\nexport class TodosService {\n  constructor(@Inject('persistStorage') private persistStorage: PersistState) {}\n\n  stopSync() {\n    this.persistStorage.destroy();\n  }\n}\n")),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("h3",{id:"storage"},Object(o.b)("inlineCode",{parentName:"h3"},"storage")),Object(o.b)("p",null,"storage strategy to use. This defaults to localStorage but you can pass sessionStorage or anything that implements the StorageEngine API."),Object(o.b)("h3",{id:"key"},Object(o.b)("inlineCode",{parentName:"h3"},"key")),Object(o.b)("p",null,"The key by which the state is saved."),Object(o.b)("h3",{id:"include"},Object(o.b)("inlineCode",{parentName:"h3"},"include")),Object(o.b)("p",null,"By default the whole state is saved to storage, use this param to include only the stores you need. It can be a store name or a predicate callback."),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"To store an ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/akita/docs/ui#entity-ui-state"}),"entityUIStore")," you need to add ",Object(o.b)("inlineCode",{parentName:"p"},"UI/{storeName}"),"."))),Object(o.b)("h3",{id:"select"},Object(o.b)("inlineCode",{parentName:"h3"},"select")),Object(o.b)("p",null,"By default the whole state is saved to storage, use this param to include only the data you need."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { persistState, PersistStateSelectFn } from '@datorama/akita';\n\nconst selectToken: PersistStateSelectFn<AuthState> = (state) => ({ token: state.token });\nselectToken.storeName = 'auth';\n\npersistState({ select: [selectToken] });\n")),Object(o.b)("h3",{id:"deserialize"},Object(o.b)("inlineCode",{parentName:"h3"},"deserialize")),Object(o.b)("p",null,"Custom deserializer. Defaults to JSON.parse"),Object(o.b)("h3",{id:"serialize"},Object(o.b)("inlineCode",{parentName:"h3"},"serialize")),Object(o.b)("p",null,"Custom serializer, defaults to JSON.stringify"),Object(o.b)("h3",{id:"prestorageupdateoperator"},Object(o.b)("inlineCode",{parentName:"h3"},"preStorageUpdateOperator")),Object(o.b)("p",null,"Custom operators that will run before storage update"),Object(o.b)("h3",{id:"enableinnonbrowser"},Object(o.b)("inlineCode",{parentName:"h3"},"enableInNonBrowser")),Object(o.b)("p",null,"Whether to enable persistState in a non-browser environment"),Object(o.b)("h3",{id:"persistondestroy"},Object(o.b)("inlineCode",{parentName:"h3"},"persistOnDestroy")),Object(o.b)("p",null,"Whether to persist the ",Object(o.b)("inlineCode",{parentName:"p"},"cache")," value of dynamic store upon destroy"),Object(o.b)("p",null,"You can also track a specific store's key. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"persistState({ include: ['auth.token'] });\n")),Object(o.b)("h2",{id:"separate-branch-in-storage"},"Separate branch in storage"),Object(o.b)("p",null,"By default when you provide ",Object(o.b)("inlineCode",{parentName:"p"},"persistStorage"),", it means that all stores would be persisted under one key in ",Object(o.b)("inlineCode",{parentName:"p"},"localStorage")," or other storage."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'settings' })\nexport class SettingsStore extends Store<SettingsState> {\n  constructor() {\n    super();\n  }\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'users' })\nexport class UsersStore extends Store<UsersState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n\nexport const persistStorage = persistState({\n  include: ['settings', 'users'],\n  key: 'myStore',\n});\n\nconst providers = [{ provide: 'persistStorage', useValue: storage }];\n")),Object(o.b)("p",null,"In the example, all stores data would be saved in one ",Object(o.b)("inlineCode",{parentName:"p"},"localStorage")," item with key ",Object(o.b)("inlineCode",{parentName:"p"},"myStore"),";"),Object(o.b)("p",null,"But, you also can provide a storage which would be saved in the separate ",Object(o.b)("inlineCode",{parentName:"p"},"localStorage")," item:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'settings' })\nexport class SettingsStore extends Store<SettingsState> {\n  constructor() {\n    super();\n  }\n}\n\nexport const settingsPersistStorage = persistState({\n  include: ['settings'],\n  key: 'settingsStore',\n});\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'users' })\nexport class UsersStore extends Store<UsersState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n\nexport const usersPersistStorage = persistState({\n  include: ['users'],\n  key: 'usersStore',\n});\n\nconst providers = [\n  { provide: 'persistStorage', useValue: settingsPersistStorage, multi: true },\n  { provide: 'persistStorage', useValue: usersPersistStorage, multi: true },\n];\n")),Object(o.b)("p",null,"Now, ",Object(o.b)("inlineCode",{parentName:"p"},"SettingsStore")," would be saved in ",Object(o.b)("inlineCode",{parentName:"p"},"localStorage")," under key ",Object(o.b)("inlineCode",{parentName:"p"},"settingsStore")," and ",Object(o.b)("inlineCode",{parentName:"p"},"UsersStore")," under ",Object(o.b)("inlineCode",{parentName:"p"},"usersStore"),"."),Object(o.b)("h2",{id:"custom-hooks"},"Custom Hooks"),Object(o.b)("p",null,"You can use the ",Object(o.b)("inlineCode",{parentName:"p"},"preStorageUpdate"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"preStoreUpdate")," hooks to get more control on the state.\nFor example, here is how we can save only specific keys from the ",Object(o.b)("inlineCode",{parentName:"p"},"auth")," state:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"persistState({\n  include: ['auth', 'todos'],\n  preStorageUpdate(storeName, state) {\n    if (storeName === 'auth') {\n      return {\n        token: state.token,\n        expired: state.expired,\n      };\n    }\n\n    return state;\n  },\n  preStoreUpdate(storeName, state) {\n    return state;\n  },\n});\n")),Object(o.b)("p",null,"We can also control how the state is being saved and updated:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"persistState({\n  include: ['auth', 'products'],\n  preStorageUpdate(storeName, state) {\n    if (storeName === 'products') {\n      return {\n        sort: state.ui.filters.sort,\n      };\n    }\n\n    return state;\n  },\n  preStoreUpdate(storeName, state, initialState) {\n    if (storeName === 'products') {\n      return {\n        ui: {\n          filters: {\n            ...initialState.ui.filters,\n            sort: state.sort,\n          },\n        },\n      };\n    }\n\n    return state;\n  },\n});\n")),Object(o.b)("h2",{id:"async-support"},"Async Support"),Object(o.b)("p",null,"This gives you the option to save a store\u2019s value to a persistent storage, such as indexDB, websql, or any other asynchronous API. Here\u2019s an example that leverages ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/localForage/localForage"}),"localForage"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import * as localForage from 'localforage';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'Akita',\n  version: 1.0,\n  storeName: 'akita-storage',\n});\n\npersistState({ include: ['auth.token', 'todos'], storage: localForage });\n")),Object(o.b)("h2",{id:"selectpersiststateinit"},"selectPersistStateInit"),Object(o.b)("p",null,"Akita also exposes the ",Object(o.b)("inlineCode",{parentName:"p"},"selectPersistStateInit")," observable. This observable emits after Akita initialized the stores based on the storage's value. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { selectPersistStateInit } from '@datorama/akita';\n\nexport class AuthGuard {\n  constructor(private router: Router, private authQuery: AuthQuery) {}\n\n  canActivate() {\n    return combineLatest([this.authQuery.isLoggedIn$, selectPersistStateInit()]).pipe(\n      map(([isAuth]) => {\n        if (isAuth) return true;\n        this.router.navigateByUrl('login');\n        return false;\n      }),\n      take(1)\n    );\n  }\n}\n")),Object(o.b)("h2",{id:"performance-optimization"},"Performance Optimization"),Object(o.b)("p",null,"By default, the plugin will update the storage upon each store's change. Some applications perform multiple updates in a second, and update the storage on each change can be costly."),Object(o.b)("p",null,"For such cases, it's recommended to use the ",Object(o.b)("inlineCode",{parentName:"p"},"preStorageUpdateOperator")," option and add a ",Object(o.b)("inlineCode",{parentName:"p"},"debounce"),". For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { debounceTime } from 'rxjs/operators';\n\npersistState({\n  include: ['auth.token', 'todos'],\n  preStorageUpdateOperator: () => debounceTime(2000),\n});\n")))}p.isMDXComponent=!0}}]);